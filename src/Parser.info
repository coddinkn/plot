-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> expr                               (0)
	expr -> '(' lam exprs '->' expr ')'                (1)
	expr -> '(' expr exprs ')'                         (2)
	expr -> id                                         (3)
	exprs ->                                           (4)
	exprs -> expr exprs                                (5)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { TId  $$ }
	'->'           { TArrow }
	'('            { TLParen }
	')'            { TRParen }
	lam            { TLambda }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3
	exprs           rules 4, 5

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	id             shift, and enter state 4
	'('            shift, and enter state 5

	expr           goto state 3

State 1


	'('            shift, and enter state 2


State 2

	expr -> '(' . lam exprs '->' expr ')'               (rule 1)

	lam            shift, and enter state 7


State 3

	%start_parse -> expr .                              (rule 0)

	%eof           accept


State 4

	expr -> id .                                        (rule 3)

	id             reduce using rule 3
	'->'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 5

	expr -> '(' . lam exprs '->' expr ')'               (rule 1)
	expr -> '(' . expr exprs ')'                        (rule 2)

	id             shift, and enter state 4
	'('            shift, and enter state 5
	lam            shift, and enter state 7

	expr           goto state 6

State 6

	expr -> '(' expr . exprs ')'                        (rule 2)

	id             shift, and enter state 4
	'('            shift, and enter state 5
	')'            reduce using rule 4

	expr           goto state 8
	exprs          goto state 10

State 7

	expr -> '(' lam . exprs '->' expr ')'               (rule 1)

	id             shift, and enter state 4
	'->'           reduce using rule 4
	'('            shift, and enter state 5

	expr           goto state 8
	exprs          goto state 9

State 8

	exprs -> expr . exprs                               (rule 5)

	id             shift, and enter state 4
	'->'           reduce using rule 4
	'('            shift, and enter state 5
	')'            reduce using rule 4

	expr           goto state 8
	exprs          goto state 13

State 9

	expr -> '(' lam exprs . '->' expr ')'               (rule 1)

	'->'           shift, and enter state 12


State 10

	expr -> '(' expr exprs . ')'                        (rule 2)

	')'            shift, and enter state 11


State 11

	expr -> '(' expr exprs ')' .                        (rule 2)

	id             reduce using rule 2
	'->'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 12

	expr -> '(' lam exprs '->' . expr ')'               (rule 1)

	id             shift, and enter state 4
	'('            shift, and enter state 5

	expr           goto state 14

State 13

	exprs -> expr exprs .                               (rule 5)

	'->'           reduce using rule 5
	')'            reduce using rule 5


State 14

	expr -> '(' lam exprs '->' expr . ')'               (rule 1)

	')'            shift, and enter state 15


State 15

	expr -> '(' lam exprs '->' expr ')' .               (rule 1)

	id             reduce using rule 1
	'->'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 6
Number of terminals: 5
Number of non-terminals: 3
Number of states: 16
